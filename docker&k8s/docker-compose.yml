version: '3.8'
services:
###########################################  mysql  #######################################
  mysql:
    image: mysql:8.3.0
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: cetc
      MYSQL_DATABASE: db
      MYSQL_USER: cetc
      MYSQL_PASSWORD: cetc
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
        # - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
        # - ./db/my.cnf:/etc/mysql/my.cnf
###########################################  adminer  #######################################
  adminer:
    image:  adminer:4.8.1
    container_name: adminer
    restart: unless-stopped
    ports:
      - 8080:8080

###########################################  postgres  #######################################
  postgres:
    image: postgres:16.2
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=123456
      - POSTGRES_USER=admin
      - POSTGRES_DB=db

###########################################  redis  #######################################
  redis:
    # 镜像名称以及版本号
    image: redis:7.2.4
    # 失败后总是重启
    restart: unless-stopped
    # 自定义容器名
    container_name: redis
    # 文件夹以及文件映射
    volumes:
      - redis_data:/data
      - /app/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
        #- /app/redis/logs:/logs
    command:
      # 以配置文件的方式启动 redis.conf
      redis-server /usr/local/etc/redis/redis.conf
    ports:
      # 端口号
      - '6379:6379'      

###########################################  autoK3s  #######################################
  autok3s:
    image: cnrancher/autok3s:v0.9.2
    restart: unless-stopped
#   network_mode: "host"    
    init: true
#    ports:
#    - 8080:8086
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - autok3s_data:$HOME/.autok3s/
    environment:
      - AUTOK3S_CONFIG=$HOME/.autok3s/
      - VIRTUAL_HOST=autok3s.vcap.me
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.k3s.rule=Host(`k3s.homeserver.com`)"
      - "traefik.http.routers.k3s.entrypoints=web"
      - "traefik.http.services.k3s.loadbalancer.server.port=8080"
    networks:
      - proxy   #######################  使用和traefik一样的网络  #######################

###########################################  glances  #######################################
  glance:
    image: nicolargo/glances:latest
    restart: always
    container_name: glance
    pid: host
    ports:
      - "61028:61028"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # Uncomment the below line if you want glances to display host OS detail instead of container's
      # - /etc/os-release:/etc/os-release:ro
    environment:
      - "GLANCES_OPT=-w"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mornitor.rule=Host(`glance.homeserver.com`)"
      - "traefik.http.routers.mornitor.entrypoints=web"
      - "traefik.http.services.mornitor.loadbalancer.server.port=61208"
    networks:
      - proxy

###########################################  traefik  #######################################
  reverse-proxy:
    image: traefik:v2.11.2
    container_name: traefik
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--ping=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --proxy off localhost:8080/ping || exit 1"]
      interval: 3s
      retries: 10
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cc.rule=Host(`traefik.homeserver.com`)"
      - "traefik.http.routers.cc.entrypoints=web"
      - "traefik.docker.network=proxy"      
      - "traefik.http.services.cc.loadbalancer.server.port=8080"
    networks:    #######################  必须创建网络  docker network create proxy  #######################
      - proxy

  whoami:
    image: emilevauge/whoami
    container_name: whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dd.rule=Host(`whoami.homeserver.com`)"
      - "traefik.http.routers.dd.entrypoints=web"
    networks:
      - proxy

###########################################  Dashy  #######################################
  dashy:
    container_name: Dashy

    # Pull latest image from DockerHub
    image: lissy93/dashy:3.0.0

    # To build from source, replace 'image: lissy93/dashy' with 'build: .'
    # build: .

    # You can also use an image with a different tag, or pull from a different registry, e.g:
    # image: ghcr.io/lissy93/dashy or image: lissy93/dashy:3.0.0

    # Pass in your config file below, by specifying the path on your host machine
    volumes:
      - /app/dashy/conf.yml:/app/user-data/conf.yml
      - /app/dashy/item-icons:/app/user-data/item-icons/

    # Set port that web service will be served on. Keep container port as 80
    ports:
      - 4000:8080

    # Set any environmental variables
    environment:
      - NODE_ENV=production
    # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`
    #  - UID=1000
    #  - GID=1000

    # Specify restart policy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.Dashy.rule=Host(`dashy.homeserver.com`)"
      - "traefik.http.routers.Dashy.entrypoints=web"
      - "traefik.http.services.Dashy.loadbalancer.server.port=8080"      
    networks:
      - proxy

    # Configure healthchecks
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

###########################################  dozzle  #######################################
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:v6.5.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 8888:8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`log.homeserver.com`)"
      - "traefik.http.routers.dozzle.entrypoints=web"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"      
    networks:
      - proxy

###########################################  portainer  #######################################
  portainer:
    image: portainer/portainer-ce:2.19.5
    container_name: portainer
    ports:
      - 9443:9443
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.homeserver.com`)"
      - "traefik.http.routers.portainer.entrypoints=web"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    networks:
      - proxy

###########################################  netdata  #######################################
  netdata:
    image: netdata/netdata:v1.45.3
    container_name: netdata
    hostname: $(hostname)
    restart: unless-stopped
    ports:
      - 19999:19999    
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netdata.rule=Host(`netdata.homeserver.com`)"
      - "traefik.http.routers.netdata.entrypoints=web"
      - "traefik.http.services.netdata.loadbalancer.server.port=19999"
    networks:
      - proxy

###########################################  portainer-agent  #######################################
  portainer-agent:
    container_name: portainer-agent
    image: portainer/agent:2.19.5
    ports:
      - "9001:9001"  
    volumes:
      # Mount the host's Docker socket into the container
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount the host's Docker volumes into the container
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    depends_on:
      - portainer
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
      restart_policy:
        condition: unless-stopped
        delay: 5s
        window: 120s
    networks:
      - proxy

###########################################  drawio  #######################################
  drawio:
    image: jgraph/drawio:24.2.7
    container_name: drawio
    restart: unless-stopped
    ports:
      - 8083:8080
      - 8443:8443
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8080 || exit 1"]
      interval: 1m30s
      timeout: 10s
      retries: 5
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drawio.rule=Host(`drawio.homeserver.com`)"
      - "traefik.http.routers.drawio.entrypoints=web"
      - "traefik.http.services.drawio.loadbalancer.server.port=8080"
    networks:
      - proxy

###########################################  librespeed  #######################################

  librespeed:
    image: linuxserver/librespeed:5.3.0
    container_name: librespeed
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - PASSWORD=123456
#    volumes:
#      - /path/to/librespeed/config:/config
#    ports:
#      - 80:80
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librespeed.rule=Host(`librespeed.homeserver.com`)"
      - "traefik.http.routers.librespeed.entrypoints=web"
      - "traefik.http.services.librespeed.loadbalancer.server.port=80"
    networks:
      - proxy

###########################################  pihole  #######################################

  pihole:
    container_name: pihole
    image: pihole/pihole:2024.03.2
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
#      - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "8084:80/tcp"
    environment:
      TZ: 'Asia/Shanghai'
      WEBPASSWORD: hghVmhtcMn3iD

    # Volumes store your data between container upgrades
    volumes:
      - './pihole/etc-pihole/:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'

    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`pihole.homeserver.com`)"
      - "traefik.http.routers.pihole.entrypoints=web"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.http.middlewares.foo-add-prefix.addprefix.prefix=/admin"
      # Apply the middleware named `foo-add-prefix` to the router named `router1`
      - "traefik.http.routers.pihole.middlewares=foo-add-prefix@docker"
    networks:
      - proxy


###########################################   nextcloud  #######################################
  next-pg:
    image: postgres:16.2
    restart: always
    volumes:
      - ddb:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
    networks:
      - proxy

  nextcloud:
    image: nextcloud:29.0.0
    ports:
      - 8085:80
    links:
      - next-pg 
    volumes:
      - next:/var/www/html
    restart: always
    environment:
      - POSTGRES_HOST=next-pg
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=123456
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.homeserver.com`)"
      - "traefik.http.routers.nextcloud.entrypoints=web"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
    networks:
      - proxy

#######################  必须创建网络  ,docker network create prox  #######################
networks:    
  proxy:
    external: true    #######################  必须创建网络在每个docker-compose中使用  #######################

###############  volumes for mysql  ###############
volumes:
  mysql_data:
  postgres_data:
  redis_data:
  autok3s_data:
  portainer_data:
  netdataconfig:
  netdatalib:
  netdatacache:
  next:
  ddb: